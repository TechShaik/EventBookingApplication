# Application Configuration
spring.application.name=BookStoreGateway
server.port=8089

# Eureka Configuration
eureka.client.register-with-eureka=true
eureka.client.fetch-registry=true
eureka.client.serviceUrl.defaultZone=http://localhost:8761/eureka/
eureka.instance.prefer-ip-address=true
eureka.client.healthcheck.enabled=true
eureka.instance.lease-renewal-interval-in-seconds=5
eureka.instance.lease-expiration-duration-in-seconds=10
 


spring.cloud.gateway.routes[0].id=user-services
spring.cloud.gateway.routes[0].uri=lb://USER-SERVICES
spring.cloud.gateway.routes[0].predicates[0]=Path=/users/**
 

spring.cloud.gateway.routes[1].id=event-services
spring.cloud.gateway.routes[1].uri=lb://EVENT-SERVICES
spring.cloud.gateway.routes[1].predicates[0]=Path=/event/** 


spring.cloud.gateway.routes[2].id=booking-services
spring.cloud.gateway.routes[2].uri=lb://BOOKING-SERVICES
spring.cloud.gateway.routes[2].predicates[0]=Path=/booking/**


spring.cloud.gateway.routes[3].id=payement-services
spring.cloud.gateway.routes[3].uri=lb://PAYEMENT-SERVICES
spring.cloud.gateway.routes[3].predicates[0]=Path=/payement/**

# Logging Configuration
logging.level.root=INFO
logging.level.org.springframework.cloud.gateway=DEBUG
logging.level.org.springframework.cloud.gateway.route.RouteDefinitionLocator=DEBUG
logging.level.org.springframework.cloud.gateway.support.WeightCalculatorFilter=WARN

# Actuator Configuration
management.endpoints.web.exposure.include=health,info,circuitbreakers
management.endpoint.health.show-details=always
management.health.circuitbreakers.enabled=true

# Resilience4j Configuration
resilience4j.circuitbreaker.instances.bookServiceCircuitBreaker.slidingWindowSize=10
resilience4j.circuitbreaker.instances.bookServiceCircuitBreaker.minimumNumberOfCalls=3
resilience4j.circuitbreaker.instances.bookServiceCircuitBreaker.permittedNumberOfCallsInHalfOpenState=3
resilience4j.circuitbreaker.instances.bookServiceCircuitBreaker.waitDurationInOpenState=10s
resilience4j.circuitbreaker.instances.bookServiceCircuitBreaker.failureRateThreshold=50
resilience4j.circuitbreaker.instances.bookServiceCircuitBreaker.automatic-transition-from-open-to-half-open-enabled=true
resilience4j.circuitbreaker.instances.bookServiceCircuitBreaker.sliding-window-type=count_based

resilience4j.circuitbreaker.instances.userServiceCircuitBreaker.slidingWindowSize=10
resilience4j.circuitbreaker.instances.userServiceCircuitBreaker.minimumNumberOfCalls=3
resilience4j.circuitbreaker.instances.userServiceCircuitBreaker.permittedNumberOfCallsInHalfOpenState=3
resilience4j.circuitbreaker.instances.userServiceCircuitBreaker.waitDurationInOpenState=10s
resilience4j.circuitbreaker.instances.userServiceCircuitBreaker.failureRateThreshold=50
resilience4j.circuitbreaker.instances.userServiceCircuitBreaker.automatic-transition-from-open-to-half-open-enabled=true
resilience4j.circuitbreaker.instances.userServiceCircuitBreaker.sliding-window-type=count_based

resilience4j.timelimiter.instances.bookServiceCircuitBreaker.timeoutDuration=5000ms
resilience4j.timelimiter.instances.userServiceCircuitBreaker.timeoutDuration=5000ms
resilience4j.timelimiter.instances.cartServiceCircuitBreaker.timeoutDuration=3000ms
resilience4j.timelimiter.instances.orderServiceCircuitBreaker.timeoutDuration=5000ms

resilience4j.retry.instances.orderServiceCircuitBreaker.max-attempts=3
resilience4j.retry.instances.orderServiceCircuitBreaker.wait-duration=2s


resilience4j.retry.instances.cartServiceCircuitBreaker.max-attempts=3
resilience4j.retry.instances.cartServiceCircuitBreaker.wait-duration=2s


# Retry Configuration
resilience4j.retry.instances.bookServiceCircuitBreaker.max-attempts=3
resilience4j.retry.instances.bookServiceCircuitBreaker.wait-duration=2s

# Rate Limiter Configuration (if required)
resilience4j.ratelimiter.instances.bookServiceCircuitBreaker.timeout=0
resilience4j.ratelimiter.instances.bookServiceCircuitBreaker.limit-refresh-period=2s
resilience4j.ratelimiter.instances.bookServiceCircuitBreaker.limit-for-period=2

# Discovery Configuration
spring.cloud.discovery.enabled=true
spring.cloud.loadbalancer.enabled=true
