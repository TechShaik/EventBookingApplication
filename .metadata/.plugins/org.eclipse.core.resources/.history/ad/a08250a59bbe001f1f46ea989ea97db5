package com.files.PayementService.Services;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;

import com.files.PayementService.dto.ProductRequest;
import com.files.PayementService.dto.StripeRespone;
import com.stripe.Stripe;
import com.stripe.exception.StripeException;
import com.stripe.model.checkout.Session;
import com.stripe.net.StripeResponse;
import com.stripe.param.checkout.SessionCreateParams;
import com.stripe.param.checkout.SessionCreateParams.LineItem;
import com.stripe.param.checkout.SessionCreateParams.LineItem.PriceData;
import com.stripe.param.checkout.SessionCreateParams.LineItem.PriceData.ProductData;
@Service
public class StripeService {

    @Value("${stripe.secretKey}")
    private String secretKey;

    public StripeRespone checkoutProduct(ProductRequest productRequest) {
        Stripe.apiKey = secretKey;

        try {
            ProductData productData = ProductData.builder()
                .setName(productRequest.getName())
                .build();

            PriceData priceData = PriceData.builder()
                .setCurrency(productRequest.getCurrency() == null ? "USD" : productRequest.getCurrency())
                .setUnitAmount(productRequest.getAmount())
                .setProductData(productData)
                .build();

            LineItem lineItem = LineItem.builder()
                .setQuantity(productRequest.getQuantity())
                .setPriceData(priceData)
                .build();

            SessionCreateParams params = SessionCreateParams.builder()
                .setMode(SessionCreateParams.Mode.PAYMENT)
                .setSuccessUrl("http://localhost:8089/success")
                .setCancelUrl("http://localhost:8089/cancel")
                .addLineItem(lineItem)
                .build();

            System.out.println(params); // Debug log

            Session session = Session.create(params);

            return StripeRespone.builder()
                .status("Success")
                .message("Payment session created")
                .sessionId(session.getId())
                .sessionUrl(session.getUrl())
                .build();
        } catch (StripeException e) {
            throw new RuntimeException("Failed to create Stripe session: " + e.getMessage(), e);
        } catch (Exception e) {
            throw new RuntimeException("Unexpected error occurred: " + e.getMessage(), e);
        }
    }
}
